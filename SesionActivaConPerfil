const { Client } = require('whatsapp-web.js');
const fs = require('fs');
const csv = require('csv-parser');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;

// Configura Puppeteer para usar tu perfil activo de Chrome.
const client = new Client({
  puppeteer: {
    headless: false, // Muestra el navegador para ver la ejecución.
    executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe', // Ruta al ejecutable de Chrome.
    userDataDir: 'C:\\Users\\marco\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 4', // Cambia 'Default' si usas otro perfil.
    args: ['--no-sandbox', '--disable-setuid-sandbox'],
  }
});

const csvWriter = createCsvWriter({
  path: './messages_responses.csv',
  header: [
    { id: 'sentMessage', title: 'Mensaje Enviado' },
    { id: 'responseMessage', title: 'Respuesta' }
  ]
});

let sentMessages = [];

/**
 * Carga un archivo CSV y devuelve un arreglo con las filas.
 */
function loadCSV(filePath) {
  return new Promise((resolve, reject) => {
    const messages = [];
    fs.createReadStream(filePath)
      .pipe(csv())
      .on('data', (row) => {
        messages.push(row);
      })
      .on('end', () => resolve(messages))
      .on('error', (err) => reject(err));
  });
}

/**
 * Envía un mensaje a un número de WhatsApp.
 */
async function sendMessage(phone, message) {
  const chatId = `${phone}@c.us`;
  try {
    await client.sendMessage(chatId, message);
    sentMessages.push({ phone: chatId, message });
  } catch (error) {
    console.error(`Error al enviar mensaje a ${phone}:`, error);
  }
}

/**
 * Envía mensajes con un retraso configurable entre cada uno.
 */
async function sendMessagesWithDelay(messages, delay) {
  for (let i = 0; i < messages.length; i++) {
    const row = messages[i];
    if (row.phone && row.message) {
      await sendMessage(row.phone, row.message);
    }
    if (i < messages.length - 1) {
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}

// Captura las respuestas y las guarda en el archivo CSV.
client.on('message', async (message) => {
  if (message.body && message.from !== client.info.wid.user) {
    const sentMessage = sentMessages.find(sent => sent.phone === message.from);
    if (sentMessage) {
      try {
        await csvWriter.writeRecords([{
          sentMessage: sentMessage.message,
          responseMessage: message.body
        }]);
      } catch (error) {
        console.error('Error al guardar la respuesta en CSV:', error);
      }
    }
  }
});

/**
 * Lee el archivo CSV de contactos y envía los mensajes.
 */
async function sendMessagesFromCSV() {
  const filePath = './contacts.csv';
  const delay = 15000;
  try {
    const messages = await loadCSV(filePath);
    await sendMessagesWithDelay(messages, delay);
  } catch (error) {
    console.error("Error al procesar el CSV:", error);
  }
}

// Evento: El cliente está listo.
client.on('ready', () => {
  console.log('Cliente listo. Enviando mensajes...');
  sendMessagesFromCSV();
});

// Evento: Se desconectó la sesión.
client.on('disconnected', (reason) => {
  console.error('Cliente desconectado:', reason);
});

// Inicializa el cliente.
client.initialize();
